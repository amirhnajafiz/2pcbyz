syntax = "proto3";
package database;

import "google/protobuf/empty.proto";

option go_package = "./rpc/database";

// creating rpc services for database management system.
service Database {
  rpc Request(RequestMsg) returns (google.protobuf.Empty) {}
  rpc Reply(ReplyMsg) returns (google.protobuf.Empty) {}
  rpc Prepare(RequestMsg) returns (google.protobuf.Empty) {}
  rpc Ack(AckMsg) returns (google.protobuf.Empty) {}
  rpc Commit(CommitMsg) returns (google.protobuf.Empty) {}
  rpc Abort(AbortMsg) returns (google.protobuf.Empty) {}
}

// transaction contains our units of work.
message TransactionMsg {
  string sender = 1;
  string receiver = 2;
  int64 amount = 3;
  int64 session_id = 4;
}

// request is used for inter-shard transactions.
message RequestMsg {
  TransactionMsg transaction = 1;
  string return_address = 2;
  string coordinator_address = 3;
}

// reply is used for returning a response to the client.
message ReplyMsg {
  int64 session_id = 1;
  string text = 2;
  string return_address = 3;
  string participant_address = 4;
}

// ack is returned by nodes for 2pc.
message AckMsg {
  int64 session_id = 1;
  bool is_aborted = 2;
  string node_id = 3;
}

// commit is used in the second phase of 2pc if no node aborts prepare.
message CommitMsg {
  int64 session_id = 1;
  string return_address = 2;
}

// abort is used in the second phase of 2pc if at least one node aborts prepare.
message AbortMsg {
  int64 session_id = 1;
  string return_address = 2;
}
