// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pbft.proto

package pbft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PBFT_PrePrepare_FullMethodName    = "/pbft.PBFT/PrePrepare"
	PBFT_AckPrePrepare_FullMethodName = "/pbft.PBFT/AckPrePrepare"
	PBFT_Prepare_FullMethodName       = "/pbft.PBFT/Prepare"
	PBFT_AckPrepare_FullMethodName    = "/pbft.PBFT/AckPrepare"
	PBFT_Commit_FullMethodName        = "/pbft.PBFT/Commit"
	PBFT_Block_FullMethodName         = "/pbft.PBFT/Block"
	PBFT_Unblock_FullMethodName       = "/pbft.PBFT/Unblock"
	PBFT_Byzantine_FullMethodName     = "/pbft.PBFT/Byzantine"
	PBFT_NonByzantine_FullMethodName  = "/pbft.PBFT/NonByzantine"
)

// PBFTClient is the client API for PBFT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PBFT rpc services for transactions and pbft protocol.
// this service is used for handling internal node calls.
type PBFTClient interface {
	PrePrepare(ctx context.Context, in *PrePrepareMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AckPrePrepare(ctx context.Context, in *PrePrepareAck, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Prepare(ctx context.Context, in *PrepareMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AckPrepare(ctx context.Context, in *PrepareAck, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Block(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unblock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Byzantine(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NonByzantine(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pBFTClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTClient(cc grpc.ClientConnInterface) PBFTClient {
	return &pBFTClient{cc}
}

func (c *pBFTClient) PrePrepare(ctx context.Context, in *PrePrepareMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_PrePrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) AckPrePrepare(ctx context.Context, in *PrePrepareAck, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_AckPrePrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Prepare(ctx context.Context, in *PrepareMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) AckPrepare(ctx context.Context, in *PrepareAck, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_AckPrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Block(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Block_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Unblock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Unblock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Byzantine(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Byzantine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) NonByzantine(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_NonByzantine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTServer is the server API for PBFT service.
// All implementations must embed UnimplementedPBFTServer
// for forward compatibility.
//
// PBFT rpc services for transactions and pbft protocol.
// this service is used for handling internal node calls.
type PBFTServer interface {
	PrePrepare(context.Context, *PrePrepareMsg) (*emptypb.Empty, error)
	AckPrePrepare(context.Context, *PrePrepareAck) (*emptypb.Empty, error)
	Prepare(context.Context, *PrepareMsg) (*emptypb.Empty, error)
	AckPrepare(context.Context, *PrepareAck) (*emptypb.Empty, error)
	Commit(context.Context, *CommitMsg) (*emptypb.Empty, error)
	Block(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Unblock(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Byzantine(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	NonByzantine(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPBFTServer()
}

// UnimplementedPBFTServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPBFTServer struct{}

func (UnimplementedPBFTServer) PrePrepare(context.Context, *PrePrepareMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePrepare not implemented")
}
func (UnimplementedPBFTServer) AckPrePrepare(context.Context, *PrePrepareAck) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckPrePrepare not implemented")
}
func (UnimplementedPBFTServer) Prepare(context.Context, *PrepareMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPBFTServer) AckPrepare(context.Context, *PrepareAck) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckPrepare not implemented")
}
func (UnimplementedPBFTServer) Commit(context.Context, *CommitMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPBFTServer) Block(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedPBFTServer) Unblock(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unblock not implemented")
}
func (UnimplementedPBFTServer) Byzantine(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Byzantine not implemented")
}
func (UnimplementedPBFTServer) NonByzantine(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonByzantine not implemented")
}
func (UnimplementedPBFTServer) mustEmbedUnimplementedPBFTServer() {}
func (UnimplementedPBFTServer) testEmbeddedByValue()              {}

// UnsafePBFTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTServer will
// result in compilation errors.
type UnsafePBFTServer interface {
	mustEmbedUnimplementedPBFTServer()
}

func RegisterPBFTServer(s grpc.ServiceRegistrar, srv PBFTServer) {
	// If the following call pancis, it indicates UnimplementedPBFTServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PBFT_ServiceDesc, srv)
}

func _PBFT_PrePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).PrePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_PrePrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).PrePrepare(ctx, req.(*PrePrepareMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_AckPrePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).AckPrePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_AckPrePrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).AckPrePrepare(ctx, req.(*PrePrepareAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Prepare(ctx, req.(*PrepareMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_AckPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).AckPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_AckPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).AckPrepare(ctx, req.(*PrepareAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Commit(ctx, req.(*CommitMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Block_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Block(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Unblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Unblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Unblock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Unblock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Byzantine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Byzantine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Byzantine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Byzantine(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_NonByzantine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).NonByzantine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_NonByzantine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).NonByzantine(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFT_ServiceDesc is the grpc.ServiceDesc for PBFT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbft.PBFT",
	HandlerType: (*PBFTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrePrepare",
			Handler:    _PBFT_PrePrepare_Handler,
		},
		{
			MethodName: "AckPrePrepare",
			Handler:    _PBFT_AckPrePrepare_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _PBFT_Prepare_Handler,
		},
		{
			MethodName: "AckPrepare",
			Handler:    _PBFT_AckPrepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PBFT_Commit_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _PBFT_Block_Handler,
		},
		{
			MethodName: "Unblock",
			Handler:    _PBFT_Unblock_Handler,
		},
		{
			MethodName: "Byzantine",
			Handler:    _PBFT_Byzantine_Handler,
		},
		{
			MethodName: "NonByzantine",
			Handler:    _PBFT_NonByzantine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbft.proto",
}
