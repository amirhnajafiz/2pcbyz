// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: paxos.proto

package paxos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Paxos_Ping_FullMethodName     = "/paxos.Paxos/Ping"
	Paxos_Pong_FullMethodName     = "/paxos.Paxos/Pong"
	Paxos_Sync_FullMethodName     = "/paxos.Paxos/Sync"
	Paxos_Accept_FullMethodName   = "/paxos.Paxos/Accept"
	Paxos_Accepted_FullMethodName = "/paxos.Paxos/Accepted"
	Paxos_Commit_FullMethodName   = "/paxos.Paxos/Commit"
)

// PaxosClient is the client API for Paxos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// creating rpc services for paxos consensus protocol.
type PaxosClient interface {
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Pong(ctx context.Context, in *PongMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sync(ctx context.Context, in *SyncMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accept(ctx context.Context, in *AcceptMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accepted(ctx context.Context, in *AcceptedMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paxosClient struct {
	cc grpc.ClientConnInterface
}

func NewPaxosClient(cc grpc.ClientConnInterface) PaxosClient {
	return &paxosClient{cc}
}

func (c *paxosClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Pong(ctx context.Context, in *PongMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos_Pong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Sync(ctx context.Context, in *SyncMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Accept(ctx context.Context, in *AcceptMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Accepted(ctx context.Context, in *AcceptedMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos_Accepted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaxosServer is the server API for Paxos service.
// All implementations must embed UnimplementedPaxosServer
// for forward compatibility.
//
// creating rpc services for paxos consensus protocol.
type PaxosServer interface {
	Ping(context.Context, *PingMsg) (*emptypb.Empty, error)
	Pong(context.Context, *PongMsg) (*emptypb.Empty, error)
	Sync(context.Context, *SyncMsg) (*emptypb.Empty, error)
	Accept(context.Context, *AcceptMsg) (*emptypb.Empty, error)
	Accepted(context.Context, *AcceptedMsg) (*emptypb.Empty, error)
	Commit(context.Context, *CommitMsg) (*emptypb.Empty, error)
	mustEmbedUnimplementedPaxosServer()
}

// UnimplementedPaxosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaxosServer struct{}

func (UnimplementedPaxosServer) Ping(context.Context, *PingMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPaxosServer) Pong(context.Context, *PongMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (UnimplementedPaxosServer) Sync(context.Context, *SyncMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedPaxosServer) Accept(context.Context, *AcceptMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPaxosServer) Accepted(context.Context, *AcceptedMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accepted not implemented")
}
func (UnimplementedPaxosServer) Commit(context.Context, *CommitMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPaxosServer) mustEmbedUnimplementedPaxosServer() {}
func (UnimplementedPaxosServer) testEmbeddedByValue()               {}

// UnsafePaxosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaxosServer will
// result in compilation errors.
type UnsafePaxosServer interface {
	mustEmbedUnimplementedPaxosServer()
}

func RegisterPaxosServer(s grpc.ServiceRegistrar, srv PaxosServer) {
	// If the following call pancis, it indicates UnimplementedPaxosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Paxos_ServiceDesc, srv)
}

func _Paxos_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos_Pong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Pong(ctx, req.(*PongMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Sync(ctx, req.(*SyncMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Accept(ctx, req.(*AcceptMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Accepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Accepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos_Accepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Accepted(ctx, req.(*AcceptedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Commit(ctx, req.(*CommitMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Paxos_ServiceDesc is the grpc.ServiceDesc for Paxos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paxos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paxos.Paxos",
	HandlerType: (*PaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Paxos_Ping_Handler,
		},
		{
			MethodName: "Pong",
			Handler:    _Paxos_Pong_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Paxos_Sync_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Paxos_Accept_Handler,
		},
		{
			MethodName: "Accepted",
			Handler:    _Paxos_Accepted_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Paxos_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paxos.proto",
}
