// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: pbft.proto

package pbft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// transaction message contains a request operations sent by a client.
type TransactionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender        string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver      string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReturnAddress string `protobuf:"bytes,3,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
	Amount        int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	SessionId     int64  `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *TransactionMsg) Reset() {
	*x = TransactionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMsg) ProtoMessage() {}

func (x *TransactionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMsg.ProtoReflect.Descriptor instead.
func (*TransactionMsg) Descriptor() ([]byte, []int) {
	return file_pbft_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionMsg) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *TransactionMsg) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *TransactionMsg) GetReturnAddress() string {
	if x != nil {
		return x.ReturnAddress
	}
	return ""
}

func (x *TransactionMsg) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionMsg) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// preprepare is sent by the leader to all other nodes to start PBFT.
// digest is hash of (sender_receiver_returnaddress_amount_timestamp).
type PrePrepareMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction       *TransactionMsg `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	TransactionDigest string          `protobuf:"bytes,2,opt,name=transaction_digest,json=transactionDigest,proto3" json:"transaction_digest,omitempty"`
	NodeId            string          `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Sequence          int64           `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	View              int64           `protobuf:"varint,5,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *PrePrepareMsg) Reset() {
	*x = PrePrepareMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrePrepareMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepareMsg) ProtoMessage() {}

func (x *PrePrepareMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepareMsg.ProtoReflect.Descriptor instead.
func (*PrePrepareMsg) Descriptor() ([]byte, []int) {
	return file_pbft_proto_rawDescGZIP(), []int{1}
}

func (x *PrePrepareMsg) GetTransaction() *TransactionMsg {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *PrePrepareMsg) GetTransactionDigest() string {
	if x != nil {
		return x.TransactionDigest
	}
	return ""
}

func (x *PrePrepareMsg) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrePrepareMsg) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PrePrepareMsg) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

// preprepare ack is sent by other nodes to the leader to follow preprepare.
// preprepare digest is hash of (sequence_view_transactiondigest)
// encrypted by the sign threshold key.
type PrePrepareAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreprepareDigest string `protobuf:"bytes,1,opt,name=preprepare_digest,json=preprepareDigest,proto3" json:"preprepare_digest,omitempty"`
	NodeId           string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Sequence         int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	View             int64  `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *PrePrepareAck) Reset() {
	*x = PrePrepareAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrePrepareAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepareAck) ProtoMessage() {}

func (x *PrePrepareAck) ProtoReflect() protoreflect.Message {
	mi := &file_pbft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepareAck.ProtoReflect.Descriptor instead.
func (*PrePrepareAck) Descriptor() ([]byte, []int) {
	return file_pbft_proto_rawDescGZIP(), []int{2}
}

func (x *PrePrepareAck) GetPreprepareDigest() string {
	if x != nil {
		return x.PreprepareDigest
	}
	return ""
}

func (x *PrePrepareAck) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrePrepareAck) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PrePrepareAck) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

// preprepare is sent by the leader to all other nodes to start prepare.
// preprepare digest can be decrypted using signs threshold keys.
type PrepareMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreprepareDigest string `protobuf:"bytes,1,opt,name=preprepare_digest,json=preprepareDigest,proto3" json:"preprepare_digest,omitempty"`
	NodeId           string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Sequence         int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	View             int64  `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *PrepareMsg) Reset() {
	*x = PrepareMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMsg) ProtoMessage() {}

func (x *PrepareMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMsg.ProtoReflect.Descriptor instead.
func (*PrepareMsg) Descriptor() ([]byte, []int) {
	return file_pbft_proto_rawDescGZIP(), []int{3}
}

func (x *PrepareMsg) GetPreprepareDigest() string {
	if x != nil {
		return x.PreprepareDigest
	}
	return ""
}

func (x *PrepareMsg) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrepareMsg) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PrepareMsg) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

// prepare ack is sent by other nodes to the leader to follow prepare.
// preprepare digest is hash of (sequence_view_prepreparedigest)
// encrypted by the sign threshold key.
type PrepareAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrepareDigest string `protobuf:"bytes,1,opt,name=prepare_digest,json=prepareDigest,proto3" json:"prepare_digest,omitempty"`
	NodeId        string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Sequence      int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	View          int64  `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *PrepareAck) Reset() {
	*x = PrepareAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAck) ProtoMessage() {}

func (x *PrepareAck) ProtoReflect() protoreflect.Message {
	mi := &file_pbft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareAck.ProtoReflect.Descriptor instead.
func (*PrepareAck) Descriptor() ([]byte, []int) {
	return file_pbft_proto_rawDescGZIP(), []int{4}
}

func (x *PrepareAck) GetPrepareDigest() string {
	if x != nil {
		return x.PrepareDigest
	}
	return ""
}

func (x *PrepareAck) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrepareAck) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PrepareAck) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

// commit is sent by the leader to other nodes to finish PBFT.
// prepare digest can be decrypted using signs threshold keys.
type CommitMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrepareDigest string `protobuf:"bytes,1,opt,name=prepare_digest,json=prepareDigest,proto3" json:"prepare_digest,omitempty"`
	NodeId        string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Sequence      int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	View          int64  `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *CommitMsg) Reset() {
	*x = CommitMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMsg) ProtoMessage() {}

func (x *CommitMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMsg.ProtoReflect.Descriptor instead.
func (*CommitMsg) Descriptor() ([]byte, []int) {
	return file_pbft_proto_rawDescGZIP(), []int{5}
}

func (x *CommitMsg) GetPrepareDigest() string {
	if x != nil {
		return x.PrepareDigest
	}
	return ""
}

func (x *CommitMsg) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *CommitMsg) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CommitMsg) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

var File_pbft_proto protoreflect.FileDescriptor

var file_pbft_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x62,
	0x66, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa2, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x66, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x82,
	0x01, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x7c, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x63,
	0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x7b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x32, 0xa9,
	0x02, 0x0a, 0x04, 0x50, 0x42, 0x46, 0x54, 0x12, 0x3b, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x63, 0x6b, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x10, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73,
	0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x41,
	0x63, 0x6b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x66, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x63, 0x6b, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x0f, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbft_proto_rawDescOnce sync.Once
	file_pbft_proto_rawDescData = file_pbft_proto_rawDesc
)

func file_pbft_proto_rawDescGZIP() []byte {
	file_pbft_proto_rawDescOnce.Do(func() {
		file_pbft_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbft_proto_rawDescData)
	})
	return file_pbft_proto_rawDescData
}

var file_pbft_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pbft_proto_goTypes = []any{
	(*TransactionMsg)(nil), // 0: pbft.TransactionMsg
	(*PrePrepareMsg)(nil),  // 1: pbft.PrePrepareMsg
	(*PrePrepareAck)(nil),  // 2: pbft.PrePrepareAck
	(*PrepareMsg)(nil),     // 3: pbft.PrepareMsg
	(*PrepareAck)(nil),     // 4: pbft.PrepareAck
	(*CommitMsg)(nil),      // 5: pbft.CommitMsg
	(*emptypb.Empty)(nil),  // 6: google.protobuf.Empty
}
var file_pbft_proto_depIdxs = []int32{
	0, // 0: pbft.PrePrepareMsg.transaction:type_name -> pbft.TransactionMsg
	1, // 1: pbft.PBFT.PrePrepare:input_type -> pbft.PrePrepareMsg
	2, // 2: pbft.PBFT.AckPrePrepare:input_type -> pbft.PrePrepareAck
	3, // 3: pbft.PBFT.Prepare:input_type -> pbft.PrepareMsg
	4, // 4: pbft.PBFT.AckPrepare:input_type -> pbft.PrepareAck
	5, // 5: pbft.PBFT.Commit:input_type -> pbft.CommitMsg
	6, // 6: pbft.PBFT.PrePrepare:output_type -> google.protobuf.Empty
	6, // 7: pbft.PBFT.AckPrePrepare:output_type -> google.protobuf.Empty
	6, // 8: pbft.PBFT.Prepare:output_type -> google.protobuf.Empty
	6, // 9: pbft.PBFT.AckPrepare:output_type -> google.protobuf.Empty
	6, // 10: pbft.PBFT.Commit:output_type -> google.protobuf.Empty
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pbft_proto_init() }
func file_pbft_proto_init() {
	if File_pbft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbft_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbft_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PrePrepareMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbft_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PrePrepareAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbft_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PrepareMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbft_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PrepareAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbft_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CommitMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbft_proto_goTypes,
		DependencyIndexes: file_pbft_proto_depIdxs,
		MessageInfos:      file_pbft_proto_msgTypes,
	}.Build()
	File_pbft_proto = out.File
	file_pbft_proto_rawDesc = nil
	file_pbft_proto_goTypes = nil
	file_pbft_proto_depIdxs = nil
}
